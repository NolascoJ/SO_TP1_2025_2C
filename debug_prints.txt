// FIXED: Game over synchronization and zombie cleanup at master exit

// CRITICAL FIXES:
// 1. Prevents double decrement of remaining_players (avoided double counting)
// 2. Proper synchronization of game_over flag with semaphores
// 3. Signals view process when game ends
// 4. Zombie cleanup happens at master exit (not individual player death)

// Game over logic with proper synchronization:
if (remaining_players == 0) {
    printf("DEBUG: All players finished! Setting game_over=true\n");
    sem_wait(&game_sync_ptr->game_state_mutex);
    game_state_ptr->game_over = true;
    sem_post(&game_sync_ptr->game_state_mutex);
    printf("DEBUG: game_over is now: %d\n", game_state_ptr->game_over);

    // Signal view to update
    if (config.view_path != NULL) {
        sem_post(&game_sync_ptr->master_to_view);
        sem_wait(&game_sync_ptr->view_to_master);
    }
}

// Master loop exit:
printf("DEBUG: Master game loop exited, game_over=%d, remaining_players=%u\n", game_state_ptr->game_over, remaining_players);

// Zombie cleanup at master exit:
printf("DEBUG: Waiting for child processes to terminate...\n");
while(wait(NULL) > 0) {
    printf("DEBUG: Reaped a child process\n");
}
printf("DEBUG: All child processes terminated\n");

// View process game over detection:
if (gs_ptr->game_over) {
    printf("VIEW: Game over detected, exiting...\n");
    break;
}
